#!/usr/bin/env ruby

require 'netns-vrf'

def help
	puts "\n+ Net Name Space VRF Lite - 0.0.0 - sam@arahant.net"
	puts "+ usage: ./netns-vrf [ACTION] [OPTIONS]"
	puts "	- add [VRF_NAME]"
	puts "	- delete [VRF_NAME]"
	puts "	- show [VRF_NAME:optional]"
	puts "	- interface (push|remove) [IFACE] [VRF_NAME]"
	puts "	- ip address (inet|inet6) (add|delete) [IFACE] [VRF_NAME] [IP_ADDRESS]"
	puts "	- ip route show [VRF_NAME]"
	puts "	- ip route (inet|inet6) (add|delete) [IFACE] [VRF_NAME] [NEXT_HOP] [DESTINATION_PREFIX]\n\n"
	exit 0	
end

begin
        case ARGV[0]

                when nil
                        help

                when '-h'
                        help

		when 'help'
			help

		when '--help'
			help

		when '?'
			help

                when 'add'

                       if ARGV[1]
                                vrf_name = ARGV[1]
                                instance = VRFLite::NetNs.new(vrf_name)
                                vrf_action = instance.create
                                puts "+ VRF #{vrf_name} created."
                        else
                                help
                        end

		when 'delete'
                        if ARGV[1]
                                vrf_name = ARGV[1]
                                instance = VRFLite::NetNs.new(vrf_name)
                                vrf_action = instance.destroy
                                puts "+ VRF #{vrf_name} deleted."
                        else
                                help
                        end

                when 'show'
                        if not ARGV[1]
                                vrf_name = nil
                        else
                                vrf_name = ARGV[1]
                        end
                        vrf_table = VRFLite::NetNs.new(vrf_name)
                        vrf_table_array = vrf_table.display
                        vrf_count = 1
                        vrf_table_array.each do |vta|
                                puts "VRF - #{vta}"
                                puts "--------------------------"
                                vrf_local_link = `ip netns exec #{vta} ip address show`
                                puts "#{vrf_local_link}"    
                                puts "--------------------------\n\n"              
                                vrf_count += 1
                        end

		when 'interface'
			if ARGV[1] and ARGV[2] and ARGV[3]
				action_switch = ARGV[1]
				if_name = ARGV[2]
                                vrf_name = ARGV[3]
                                interface = VRFLite::Interface.new(if_name, vrf_name)
				if action_switch == "push"
	                                if_action = interface.add_to_vrf
					action_type = 0
				elsif action_switch == "remove"
					if_action = interface.del_from_vrf
					action_type = 1
				end
                                if if_action.to_i == 0 and action_type == 0
                                        puts "+ Interface #{if_name} correctly added to VRF #{vrf_name}"
                                elsif if_action.to_i == 0 and action_type == 1
                                        puts "+ Interface #{if_name} correctly removed from VRF #{vrf_name}"
				else 
                                        puts "+ Interface #{if_name} not found in the system."
                                end
			end

		when 'ip'

			case ARGV[1]
				when 'address'
					if ARGV[2] == "inet" and ARGV[3] and ARGV[4] and ARGV[5] and ARGV[6]
						action_switch = ARGV[3]
						if_name = ARGV[4]
						vrf_name = ARGV[5]
						vrf_addr = ARGV[6]
		                                interface = VRFLite::IPAddr.new(if_name, vrf_name, vrf_addr)
						if action_switch == "add"
		                                	ip_action = interface.add_to_vrf
							action_type = 0
						else
							ip_action = interface.del_from_vrf
							action_type = 1
						end
						if ip_action.to_i == 0 and action_type == 0
                                        		puts "+ IP address #{vrf_addr} correctly added to interface #{if_name} : VRF #{vrf_name}"
                                		elsif ip_action.to_i == 0 and action_type == 1
							puts "+ IP address #{vrf_addr} correctly deleted from interface #{if_name} : VRF #{vrf_name}"
						else
                                        		puts "+ unable to add IP address #{vrf_addr} to interface #{if_name} : VRF #{vrf_name}"
                                		end

					elsif ARGV[2] == "inet6" and ARGV[3] and ARGV[4] and ARGV[5] and ARGV[6]
						action_switch = ARGV[3]
                                                if_name = ARGV[4]
                                                vrf_name = ARGV[5]
                                                vrf_addr = ARGV[6]
                                                interface = VRFLite::IPAddr.new(if_name, vrf_name, vrf_addr)
						if action_switch == "add"
                                                        ip_action = interface.add_ip6_to_vrf
                                                        action_type = 0
                                                else
                                                        ip_action = interface.del_ip6_from_vrf
                                                        action_type = 1
                                                end
                                                if ip_action.to_i == 0 and action_type == 0
                                                        puts "+ IP address #{vrf_addr} correctly added to interface #{if_name} : VRF #{vrf_name}"
                                                elsif ip_action.to_i == 0 and action_type == 1
                                                        puts "+ IP address #{vrf_addr} correctly deleted from interface #{if_name} : VRF #{vrf_name}"
                                                else
                                                        puts "+ unable to add/delete IP address #{vrf_addr} to/from interface #{if_name} : VRF #{vrf_name}"
                                                end
					else
						help
					end

                                when 'route'
                                        if ARGV[2] == "inet" and ARGV[3] and ARGV[4] and ARGV[5] and ARGV[6] and ARGV[7]
						action_switch = ARGV[3]
						if_name = ARGV[4]
                                		vrf_name = ARGV[5]
                                		vrf_gw = ARGV[6]
                                		vrf_dst = ARGV[7]
                                		static_route = VRFLite::StaticRoute.new(if_name, vrf_name, vrf_gw, vrf_dst)
                                		if action_switch == "add"
                                        		routing_action = static_route.route_via_vrf
							action_type = 0
                                		elsif action_switch == "del"
                                        		routing_action = static_route.del_from_vrf
							action_type = 1
              			                else 
							help
						end
						if routing_action.to_i == 0 and action_type == 0
                                                        puts "+ Route to #{vrf_dst} added - nexthop: #{vrf_gw} - iface: #{if_name} - VRF #{vrf_name}"
                                                elsif routing_action.to_i == 0 and action_type == 1
                                                        puts "+ Route to #{vrf_dst} correctly deleted"
                                                else
                                                        puts "+ unable to add/delete route."
                                                end
					elsif ARGV[2] == "inet6" and ARGV[3] and ARGV[4] and ARGV[5] and ARGV[6] and ARGV[7]
                                                action_switch = ARGV[3]
                                                if_name = ARGV[4]
                                                vrf_name = ARGV[5]
                                                vrf_gw = ARGV[6]
                                                vrf_dst = ARGV[7]
                                                static_route = VRFLite::StaticRoute.new(if_name, vrf_name, vrf_gw, vrf_dst)
                                                if action_switch == "add"
                                                        routing_action = static_route.route_ip6_via_vrf
                                                        action_type = 0
                                                elsif action_switch == "del" 
                                                        routing_action = static_route.del_ip6_from_vrf
                                                        action_type = 1
                                                else
							help
						end
                                                if routing_action.to_i == 0 and action_type == 0
                                                        puts "+ Route to #{vrf_dst} added - nexthop: #{vrf_gw} - iface: #{if_name} - VRF #{vrf_name}"
                                                elsif routing_action.to_i == 0 and action_type == 1
                                                        puts "+ Route to #{vrf_dst} correctly deleted"
                                                else
                                                        puts "+ unable to add/delete route."
                                                end
					elsif ARGV[2] == "show"
						if ARGV[3]
							vrf_name = ARGV[3]
							route_show = `ip netns exec #{vrf_name} ip route show`.chop
							puts "+ VRF - #{vrf_name}:\n\n"
							puts route_show
							puts "\n\n"
						else
							help
						end
					end
				end
	end
end
